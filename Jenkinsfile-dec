pipeline {
    agent { label 'slave-1' }
    //tools { maven 'mvn398' }

    stages {
        stage('build') {
            steps {
                echo "this is build stage"
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('test') {
            steps {
                echo "this is test stage"
                sh 'mvn test'
            }
        }

        stage('Dockerized the app') {
            steps {
                echo "this is dockerize stage"
                sh 'docker build -t java-test -f Dockerfile .'
            }
        }

        stage('Scan Image with Trivy') {
            steps {
                echo "Scanning image for vulnerabilities..."
                sh '''
                    trivy image --format template --template "@html.tpl" -o trivy-report.html java-test
                    trivy image --exit-code 1 --severity HIGH,CRITICAL java-test
                '''
            }
            post {
                always {
                    echo "Archiving Trivy scan report..."
                    archiveArtifacts artifacts: 'trivy-report.html', fingerprint: true
                }
            }
        }

        stage('login and push') {
            steps {
                echo "this is login and push stage"
                withCredentials([usernamePassword(credentialsId: 'docker-hup', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                    sh '''
                        echo "$PASS" | docker login -u "$USER" --password-stdin
                        docker tag java-test "$USER/java-test"
                        docker push "$USER/java-test"
                    '''
                }
            }
        }
        stage('deploy to k8s') {
            steps {
                echo "Deploying app to Kubernetes cluster..."
                withCredentials([file(credentialsId: 'k8s', variable: 'kube')]){
                    sh '''
                       export PATH=$PATH:/home/jenkins/bin
                       kubectl config view --kubeconfig=./k8s/config
                       kubectl apply -f ./k8s/deploy.yml --context sallam --kubeconfig k8s/config
                    '''
                }}
            }
        }
    }

    post {
        success {
            slackSend (
                channel: '#jenkins-ci',
                message: "Build Success - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)",
                teamDomain: 'jenkinstest-xxj7763',
                tokenCredentialId: 'slack-notificate'
            )
        }
        failure {
            slackSend (
                channel: '#jenkins-ci',
                message: "Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)",
                teamDomain: 'jenkinstest-xxj7763',
                tokenCredentialId: 'slack-notificate'
            )
        }
    }

